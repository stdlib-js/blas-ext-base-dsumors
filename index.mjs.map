{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/dsumors.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar M = 6;\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = dsumors( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsumors( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar m;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * x[ ix ];\n\t}\n\tsum = x[ ix ];\n\tix += strideX;\n\n\t// If the stride is equal to `1`, use unrolled loops...\n\tif ( strideX === 1 ) {\n\t\tm = (N-1) % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tsum += x[ ix ];\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn sum;\n\t\t}\n\t\tfor ( i = m; i < N-1; i += M ) {\n\t\t\tsum += x[ix] + x[ix+1] + x[ix+2] + x[ix+3] + x[ix+4] + x[ix+5];\n\t\t\tix += M;\n\t\t}\n\t\treturn sum;\n\t}\n\tfor ( i = 1; i < N; i++ ) {\n\t\tsum += x[ ix ];\n\t\tix += strideX;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default dsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dsumors( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction dsumors( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport dsumors from './dsumors.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsumors;\n"],"names":["M","dsumors","N","x","strideX","offsetX","sum","ix","m","i","ndarray","stride2offset","setReadOnly"],"mappings":";;6NAsBA,IAAIA,EAAI,EAsBR,SAASC,EAASC,EAAGC,EAAGC,EAASC,GAChC,IAAIC,EACAC,EACAC,EACAC,EAEJ,GAAKP,GAAK,EACT,OAAO,EAGR,GADAK,EAAKF,EACY,IAAZD,EACJ,OAAOF,EAAIC,EAAGI,GAMf,GAJAD,EAAMH,EAAGI,GACTA,GAAMH,EAGW,IAAZA,EAAgB,CAIpB,IAHAI,GAAKN,EAAE,GAAKF,GAGH,EACR,IAAMS,EAAI,EAAGA,EAAID,EAAGC,IACnBH,GAAOH,EAAGI,GACVA,GAAMH,EAGR,GAAKF,EAAIF,EACR,OAAOM,EAER,IAAMG,EAAID,EAAGC,EAAIP,EAAE,EAAGO,GAAKT,EAC1BM,GAAOH,EAAEI,GAAMJ,EAAEI,EAAG,GAAKJ,EAAEI,EAAG,GAAKJ,EAAEI,EAAG,GAAKJ,EAAEI,EAAG,GAAKJ,EAAEI,EAAG,GAC5DA,GAAMP,EAEP,OAAOM,CACP,CACD,IAAMG,EAAI,EAAGA,EAAIP,EAAGO,IACnBH,GAAOH,EAAGI,GACVA,GAAMH,EAEP,OAAOE,CACR,CCzCA,SAASL,EAASC,EAAGC,EAAGC,GACvB,OAAOM,EAASR,EAAGC,EAAGC,EAASO,EAAeT,EAAGE,GAClD,CCjBAQ,EAAAX,EAAA,UAAAS"}